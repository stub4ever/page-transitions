@import '../../1-settings/core.breakpoints';


// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $breakpoints) {
  $min: map-get($breakpoints, $name);

  @return if($min != 0, $min, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with @ in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "@sm"
@function breakpoint-infix($name, $breakpoints: $breakpoints) {
  @return if(breakpoint-min($name) == null, "", "\\@#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin breakpoint($breakpoint, $logic: false) {
  $min: breakpoint-min($breakpoint, $breakpoints);

  @if $min {
    @if ( $logic ) {
      @media #{$logic} and (min-width: map-get($map: $breakpoints, $key: $breakpoint)) { @content; }
    }

    @else {
      @media (min-width: map-get($map: $breakpoints, $key: $breakpoint)) { @content; }
    }
  }

  @else {
    @content;
  }
}

// @mixin breakpoint($breakpoint, $logic: false) {
//   @if( $logic ) {
//     @media #{$logic} and (min-width: map-get($map: $breakpoints, $key: $breakpoint)) { @content; }
//   } @else {
//     @media (min-width: map-get($map: $breakpoints, $key: $breakpoint)) { @content; }
//   }
// }